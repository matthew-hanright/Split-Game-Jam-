<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyMother</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
hasMovedCount = 0;
storedX = x;
originalX = x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!k_right &amp;&amp; !k_left &amp;&amp; !k_up &amp;&amp; !k_down){
    if(original_direction == "right"){
        k_right = true;
    }
    if(original_direction == "left"){
        k_left = true;
    }
    if(original_direction == "up"){
        k_up = true;
    }
    if(original_direction == "down"){
        k_down = true;
    }
    if(original_direction == "upright"){
        k_right = true;
        k_up = true;
    }
    if(original_direction == "downright"){
        k_right = true;
        k_down = true;
    }
    if(original_direction == "upleft"){
        k_left = true;
        k_up = true;
    }
    if(original_direction == "downleft"){
        k_left = true;
        k_down = true;
    }
}
//Collision with obj_solid X
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
//Collision with obj_solid Y
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x , y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x , y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
//Collision with obj_enemyMother X
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    if(sign(hVelocity) * -1 == 1){
        k_right = true;
        k_left = false;
    }
    else if(sign(hVelocity) * -1 == -1){
        k_right = false;
        k_left = true;
    }
    hVelocity = 0;
}
//Collision with obj_enemyMother Y
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x , y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x , y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    if(sign(vVelocity) * -1 == 1){
        k_up = false;
        k_down = true;
    }
    else if(sign(vVelocity) * -1 == -1){
        k_up = true;
        k_down = false;
    }
    vVelocity = 0;
}
hasMovedCount++;
if(hasMovedCount == 50){
    if(storedX == x){
        x = originalX;
    }
    hasMovedCount = 0;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
