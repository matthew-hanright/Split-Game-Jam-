<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemyMother</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
maxHp = 10;
currentHp = 10;
damage = 2;
originX = x;
originY = y;
canMove = true;
isMoving = false;
maxSpeed = 5;
k_right = false;
k_left = false;
k_up = false;
k_down = false;
xToSeeIfMoved = x;
ticks = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>willMoveRight = false;
willMoveLeft = false;
willMoveUp = false;
willMoveDown = false;

if(isMoving){
    randomize();
    tempDecideMove = round(random(40));
    if(tempDecideMove == 4 || tempDecideMove == 5){
        isMoving = false;
        k_right = false;
        k_left = false;
        k_up = false;
        k_down = false;
        canMove = false;
        alarm_set(0, 50);
    }
    else if(tempDecideMove == 3){
        if(k_right){
            k_right = false;
            k_left = true;
        }
        else if(k_left){
            k_left = false;
            k_right = true;
        }
        if(k_up){
            k_up = false;
            k_down = true;
        }
        else if(k_down){
            k_down = false;
            k_up = true;
        }
    }
}

if(canMove &amp;&amp; !isMoving){
    randomize();
    tempDecideMove = round(random(40));
    if(tempDecideMove % 2 == 0 || tempDecideMove % 3 == 0){
        randomize();
        tempDecideMove = round(random(20));
        if(tempDecideMove % 2 == 0){
            willMoveRight = true;
        }
        else{
            willMoveLeft = true;
        }
    }
    randomize();
    tempDecideMove = round(random(20));
    if(tempDecideMove % 2 == 0){
        randomize();
        tempDecideMove = round(random(20));
        if(tempDecideMove % 2 == 0){
            willMoveUp = true;
        }
        else{
            willMoveDown = true;
        }
    }
}

if(abs(originX - (x + hVelocity)) &gt; (maxWanderDistance * 32)){
    willMoveRight = false;
    willMoveLeft = false;
    k_right = false;
    k_left = false;
    k_up = false;
    k_down = false;
    isMoving = false;
}
if(abs(originY - (y + vVelocity)) &gt; (maxWanderDistance * 32)){
    willMoveUp = false;
    willMoveDown = false;
    k_up = false;
    k_down = false;
    k_left = false;
    k_right = false;
    isMoving = false;
}

if(willMoveUp){
    k_up = true;
    isMoving = true;
}
if(willMoveRight){
    k_right = true;
    isMoving = true;
}
if(willMoveLeft){
    k_left = true;
    isMoving = true;
}
if(willMoveDown){
    k_down = true;
    isMoving = true;
}
ticks++;
if(ticks == 50){
    if(xToSeeIfMoved == x){
        canMove = true;
    }
    ticks = 0;
    xToSeeIfMoved = x;
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
