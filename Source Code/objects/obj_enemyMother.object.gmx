<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxHp = 5;
currentHp = 5;
maxSpeed = 7;
speedGain = 1.5;
speedLoss = .5;
hVelocity = 0;
vVelocity = 0;
damage = 1;
originX = x;
originY = y;
maxWanderDistance = 5;
image_speed = .5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move Right
if(k_right){
    hVelocity += speedGain;
    if(hVelocity &gt; maxSpeed){
        hVelocity = maxSpeed;
    }
}//Slows Down
else if(hVelocity &gt; 0){
    hVelocity -= speedLoss;
    if(hVelocity &lt; 0){
        hVelocity = 0;
    }
}
//Move Left
if(k_left){
    hVelocity -= speedGain;
    if(hVelocity &lt; -maxSpeed){
        hVelocity = -maxSpeed;
    }
}//Slows Down
else if(hVelocity &lt; 0){
    hVelocity += speedLoss;
    if(hVelocity &gt; 0){
        hVelocity = 0;
    }
}
//Move Up
if(k_up){
    vVelocity -= speedGain;
    if(vVelocity &lt; -maxSpeed){
        vVelocity = -maxSpeed;
    }
}//Slows Down
else if(vVelocity &lt; 0){
    vVelocity += speedLoss;
    if(vVelocity &gt; 0){
        vVelocity = 0;
    }
}
//Move Down
if(k_down){
    vVelocity += speedGain;
    if(vVelocity &gt; maxSpeed){
        vVelocity = maxSpeed;
    }
}//Slows Down
else if(vVelocity &gt; 0){
    vVelocity -= speedLoss;
    if(vVelocity &lt; 0){
        vVelocity = 0;
    }
}
//Collision with obj_solid X
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_solid)){
    while(!place_meeting(x + sign(hVelocity), y, obj_solid)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
//Collision with obj_solid Y
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x , y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x , y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_solid)){
    while(!place_meeting(x, y + sign(vVelocity), obj_solid)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
//Collision with obj_enemyMother X
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
if(place_meeting(x + hVelocity, y, obj_enemyMother)){
    while(!place_meeting(x + sign(hVelocity), y, obj_enemyMother)){
       x += sign(hVelocity);
    }
    hVelocity = 0;
}
//Collision with obj_enemyMother Y
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x , y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x , y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
if(place_meeting(x, y + vVelocity, obj_enemyMother)){
    while(!place_meeting(x, y + sign(vVelocity), obj_enemyMother)){
       y += sign(vVelocity);
    }
    vVelocity = 0;
}
//Enacts calculated movement
x += hVelocity;
y += vVelocity;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemyMother">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(abs(x - other.x) &lt; 32){
    if(sign(x - other.x) == 1){
        while(x - other.x &lt; 32){
            x += 1;
        }
    }
    if(sign(x - other.x) == -1){
        while(x - other.x &gt; -32){
            x -= 1;
        }
    }
}
if(abs(y - other.y) &lt; 32){
    if(sign(y - other.y) == 1){
        while(y - other.y &lt; 32){
            y += 1;
        }
    }
    if(sign(y - other.y) == -1){
        while(y - other.y &gt; -32){
            y -= 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(abs(x - other.x) &lt; 32){
    if(sign(x - other.x) == 1){
        while(x - other.x &lt; 32){
            x += 1;
        }
    }
    if(sign(x - other.x) == -1){
        while(x - other.x &gt; -32){
            x -= 1;
        }
    }
}
else if(abs(y - other.y) &lt; 32){
    if(sign(y - other.y) == 1){
        while(y - other.y &lt; 32){
            y += 1;
        }
    }
    if(sign(y - other.y) == -1){
        while(y - other.y &gt; -32){
            y -= 1;
        }
    }
}
else{
    if(place_empty(originX, originY)){
        x = originX;
        y = originY;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
